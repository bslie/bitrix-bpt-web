'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Bug, Download, Eye } from 'lucide-react';
import { BptFileInfo, buildBytes, looksLikePhpSerialized, tryDeserializePhp, convertJsonToPhp } from '@/lib/bpt';

interface BptExportDebugProps {
  content: string;
  originalFileInfo: BptFileInfo;
}

export function BptExportDebug({ content, originalFileInfo }: BptExportDebugProps) {
  const [debugInfo, setDebugInfo] = useState<string>('');

  const runDebugCheck = () => {
    const checks = [];
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ PHP serialized
    const isValidSerialized = looksLikePhpSerialized(content);
    checks.push(`‚úÖ PHP Serialized –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValidSerialized ? 'OK' : '–û–®–ò–ë–ö–ê'}`);
    
    if (!isValidSerialized) {
      checks.push(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º PHP serialized!`);
      checks.push(`üîç –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "${content.substring(0, 50)}"`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ JSON
      const phpConverted = convertJsonToPhp(content);
      if (phpConverted) {
        checks.push(`üîÑ –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ JSON –≤ PHP serialized`);
        checks.push(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–µ–Ω: ${looksLikePhpSerialized(phpConverted)}`);
      } else {
        checks.push(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ JSON –≤ PHP serialized`);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏/—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const parsed = tryDeserializePhp(content);
    if (parsed) {
      checks.push(`‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è PHP: OK`);
      checks.push(`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: ${Object.keys(parsed).join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
      const reserialized = convertJsonToPhp(JSON.stringify(parsed));
      if (reserialized) {
        checks.push(`‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è: OK`);
        checks.push(`üîç –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: ${reserialized === content ? '–î–∞' : '–ù–µ—Ç'}`);
      } else {
        checks.push(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
      }
    } else {
      checks.push(`‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PHP`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    checks.push(`üìè –î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: ${originalFileInfo.content.length} –±–∞–π—Ç`);
    checks.push(`üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ: ${content.length} –±–∞–π—Ç`);
    checks.push(`üìè –†–∞–∑–Ω–∏—Ü–∞: ${content.length - originalFileInfo.content.length} –±–∞–π—Ç`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∂–∞—Ç–∏—è
    try {
      const compressed = buildBytes(content, originalFileInfo.compression);
      checks.push(`üì¶ –°–∂–∞—Ç–∏–µ ${originalFileInfo.compression}: OK (${compressed.length} –±–∞–π—Ç)`);
    } catch (error) {
      checks.push(`‚ùå –°–∂–∞—Ç–∏–µ ${originalFileInfo.compression}: –û–®–ò–ë–ö–ê - ${error}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    const hasNonAscii = /[^\x00-\x7F]/.test(content);
    checks.push(`üî§ –°–æ–¥–µ—Ä–∂–∏—Ç non-ASCII: ${hasNonAscii ? '–î–∞' : '–ù–µ—Ç'}`);
    
    // 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏
    const originalDecompressed = originalFileInfo.content;
    checks.push(`üîç –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è: ${content !== originalDecompressed ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (content !== originalDecompressed) {
      const diff = content.length - originalDecompressed.length;
      checks.push(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã: ${diff > 0 ? '+' : ''}${diff} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ
      for (let i = 0; i < Math.min(content.length, originalDecompressed.length); i++) {
        if (content[i] !== originalDecompressed[i]) {
          checks.push(`üîç –ü–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i}: "${content[i]}" vs "${originalDecompressed[i]}"`);
          break;
        }
      }
    }
    
    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!isValidSerialized) {
      checks.push(`\nüí° –†–ï–®–ï–ù–ò–ï: –§–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!`);
      checks.push(`üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏ –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ`);
      checks.push(`üí° –ò–ª–∏: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ä–∏–≥–∏–Ω–∞–ª"`);
    } else if (content === originalDecompressed) {
      checks.push(`\n‚úÖ –§–ê–ô–õ –ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ë–∏—Ç—Ä–∏–∫—Å!`);
      checks.push(`üí° –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–∂–∞—Ç–∏–∏`);
    }
    
    setDebugInfo(checks.join('\n'));
  };

  const exportOriginalUnchanged = async () => {
    try {
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–ß–ù–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const arrayBuffer = originalFileInfo.originalBytes.slice().buffer;
      const blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `original_unchanged_${originalFileInfo.name}`;
      document.body.appendChild(link);
      link.click();
      
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¢–û–ß–ù–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞');
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: ${error}`);
    }
  };

  const exportWithDebug = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const bytes = buildBytes(content, originalFileInfo.compression);
      
      const arrayBuffer = bytes.slice().buffer;
      const blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `debug_${originalFileInfo.name}`;
      document.body.appendChild(link);
      link.click();
      
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert('–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
    }
  };

  return (
    <Card className="w-full border-orange-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-orange-700">
          <Bug className="w-5 h-5" />
          –û—Ç–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
          <Button onClick={runDebugCheck} variant="outline" size="sm">
            <Eye className="w-4 h-4 mr-1" />
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </Button>
          <Button onClick={exportOriginalUnchanged} variant="outline" size="sm" className="text-green-700">
            <Download className="w-4 h-4 mr-1" />
            –û—Ä–∏–≥–∏–Ω–∞–ª
          </Button>
          <Button onClick={exportWithDebug} variant="outline" size="sm">
            <Download className="w-4 h-4 mr-1" />
            –û—Ç–ª–∞–¥–∫–∞
          </Button>
        </div>
        
        {debugInfo && (
          <div>
            <Badge variant="outline" className="mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</Badge>
            <Textarea
              value={debugInfo}
              readOnly
              className="font-mono text-xs h-48"
            />
          </div>
        )}
      </CardContent>
    </Card>
  );
}
