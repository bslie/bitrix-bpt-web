'use client';

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Copy, Eye, Edit3, Download, AlertCircle } from 'lucide-react';
import dynamic from 'next/dynamic';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ SyntaxHighlighter –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const SyntaxHighlighter = dynamic(
  () => import('react-syntax-highlighter').then((mod) => mod.Prism),
  { 
    ssr: false,
    loading: () => (
      <div className="border rounded-md p-4 min-h-[500px] bg-muted/5 flex items-center justify-center">
        <span className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...</span>
      </div>
    )
  }
);

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
const getStyles = async () => {
  const styles = await import('react-syntax-highlighter/dist/esm/styles/prism');
  return { oneLight: styles.oneLight, oneDark: styles.oneDark };
};
import { BptFileInfo, tryDeserializePhp, convertJsonToPhp } from '@/lib/bpt';

interface BptContentViewerProps {
  fileInfo: BptFileInfo;
  onContentChange: (content: string) => void;
  onExportRequest?: () => void;
}

export function BptContentViewer({ fileInfo, onContentChange, onExportRequest }: BptContentViewerProps) {
  const [showPretty, setShowPretty] = useState(true);
  const [editableContent, setEditableContent] = useState(fileInfo.content);
  const [isEditing, setIsEditing] = useState(false);
  const [isDarkTheme, setIsDarkTheme] = useState(false);
  const [showLineNumbers, setShowLineNumbers] = useState(true);
  const [enableSyntaxHighlighting, setEnableSyntaxHighlighting] = useState(true);
  const [syntaxStyles, setSyntaxStyles] = useState<{ oneLight: unknown; oneDark: unknown } | null>(null);
  const [isEditingPrettyFormat, setIsEditingPrettyFormat] = useState(false);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  const isLargeFile = fileInfo.content.length > 50000; // 50KB

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
  React.useEffect(() => {
    if (isLargeFile) {
      setEnableSyntaxHighlighting(false);
    }
  }, [isLargeFile]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  React.useEffect(() => {
    if (enableSyntaxHighlighting && !syntaxStyles) {
      getStyles().then(setSyntaxStyles);
    }
  }, [enableSyntaxHighlighting, syntaxStyles]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  React.useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setIsDarkTheme(mediaQuery.matches);
    
    const handleChange = (e: MediaQueryListEvent) => setIsDarkTheme(e.matches);
    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π pretty —Ñ–æ—Ä–º–∞—Ç
  const prettyContent = useMemo(() => {
    if (!fileInfo.isValidSerialized) return '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ PHP serialized –¥–∞–Ω–Ω—ã–µ';
    
    const parsed = tryDeserializePhp(fileInfo.content);
    if (!parsed) return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ PHP –¥–∞–Ω–Ω—ã—Ö';
    
    return JSON.stringify(parsed, null, 2); // JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  }, [fileInfo.content, fileInfo.isValidSerialized]);

  // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º pretty –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PHP serialized
  const displayContent = showPretty && fileInfo.isValidSerialized ? prettyContent : editableContent;
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  const syntaxLanguage = useMemo(() => {
    if (showPretty && fileInfo.isValidSerialized) {
      return 'json';  // JSON –¥–ª—è pretty —Ñ–æ—Ä–º–∞—Ç–∞
    }
    return 'text';  // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è PHP serialized
  }, [showPretty, fileInfo.isValidSerialized]);

  const handleContentEdit = (newContent: string) => {
    setEditableContent(newContent);
    
    if (isEditingPrettyFormat) {
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º JSON, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PHP serialized
      const phpContent = convertJsonToPhp(newContent);
      if (phpContent) {
        onContentChange(phpContent);
      }
    } else {
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º PHP serialized, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      onContentChange(newContent);
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(displayContent);
      // TODO: –î–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
    }
  };

  const toggleEditing = () => {
    setIsEditing(!isEditing);
    if (isEditing) {
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      if (isEditingPrettyFormat) {
        const phpContent = convertJsonToPhp(editableContent);
        if (phpContent) {
          onContentChange(phpContent);
        } else {
          alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON –≤ PHP serialized —Ñ–æ—Ä–º–∞—Ç');
          return;
        }
      } else {
        onContentChange(editableContent);
      }
      setIsEditingPrettyFormat(false);
    } else {
      // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (showPretty && fileInfo.isValidSerialized) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        setIsEditingPrettyFormat(true);
        setEditableContent(prettyContent);
      } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤ PHP serialized —Ñ–æ—Ä–º–∞—Ç–µ
        setIsEditingPrettyFormat(false);
        setEditableContent(fileInfo.content);
        setShowPretty(false);
      }
    }
  };

  return (
    <Card className="w-full h-fit">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center justify-between text-lg">
          <div className="flex items-center gap-2">
            <Eye className="w-4 h-4" />
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          </div>
          <div className="flex items-center gap-2">
            <div className="flex items-center space-x-2">
              <Switch
                id="pretty-mode"
                checked={showPretty}
                onCheckedChange={setShowPretty}
                disabled={!fileInfo.isValidSerialized || isEditing}
              />
              <Label htmlFor="pretty-mode" className="text-xs">
                –ß–∏—Ç–∞–µ–º—ã–π
              </Label>
            </div>
            
            {!isEditing && (
              <>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="syntax-highlighting"
                    checked={enableSyntaxHighlighting}
                    onCheckedChange={setEnableSyntaxHighlighting}
                  />
                  <Label htmlFor="syntax-highlighting" className="text-xs">
                    –ü–æ–¥—Å–≤–µ—Ç–∫–∞
                  </Label>
                </div>
                
                {enableSyntaxHighlighting && (
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="line-numbers"
                      checked={showLineNumbers}
                      onCheckedChange={setShowLineNumbers}
                    />
                    <Label htmlFor="line-numbers" className="text-xs">
                      –ù–æ–º–µ—Ä–∞
                    </Label>
                  </div>
                )}
              </>
            )}
            
            <Button
              variant="outline"
              size="sm"
              onClick={copyToClipboard}
            >
              <Copy className="w-4 h-4" />
            </Button>
            {onExportRequest && (
              <Button
                variant="outline"
                size="sm"
                onClick={onExportRequest}
              >
                <Download className="w-4 h-4" />
              </Button>
            )}
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-3">
                        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button
                variant={isEditing ? "default" : "outline"}
                size="sm"
                onClick={toggleEditing}
              >
                <Edit3 className="w-4 h-4 mr-1" />
                {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
              {isEditing && (
                <span className="text-xs text-amber-600 flex items-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  {isEditingPrettyFormat 
                    ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ PHP)' 
                    : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PHP serialized —Ñ–æ—Ä–º–∞—Ç–∞'
                  }
                </span>
              )}
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              {!isEditing && (
                <>
                  <span>{showPretty ? 'üé® JSON' : 'üìù PHP'}</span>
                  <span>‚Ä¢</span>
                  <span>{enableSyntaxHighlighting ? 'üåà –ü–æ–¥—Å–≤–µ—Ç–∫–∞' : '‚ö° –ë—ã—Å—Ç—Ä–æ'}</span>
                  <span>‚Ä¢</span>
                  <span>{displayContent.split('\n').length} —Å—Ç—Ä–æ–∫</span>
                  {isLargeFile && (
                    <>
                      <span>‚Ä¢</span>
                      <span className="text-orange-600">–§–∞–π–ª &gt; 50KB</span>
                    </>
                  )}
                </>
              )}
              {isEditing && (
                <span className="text-amber-600">
                  ‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {isEditingPrettyFormat ? 'JSON' : 'PHP'} —Ñ–æ—Ä–º–∞—Ç–µ
                </span>
              )}
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ */}
          <div className="relative">
            {isEditing ? (
              // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±—ã—á–Ω–∞—è textarea
              <Textarea
                value={editableContent}
                onChange={(e) => handleContentEdit(e.target.value)}
                className="min-h-[500px] font-mono text-xs resize-none border-primary"
                placeholder="PHP serialized —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ..."
              />
            ) : enableSyntaxHighlighting && !isLargeFile && syntaxStyles ? (
              // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
              <div className="border rounded-md overflow-hidden bg-muted/5">
                <SyntaxHighlighter
                  language={syntaxLanguage}
                  style={isDarkTheme ? (syntaxStyles.oneDark as Record<string, React.CSSProperties>) : (syntaxStyles.oneLight as Record<string, React.CSSProperties>)}
                  customStyle={{
                    margin: 0,
                    minHeight: '500px',
                    fontSize: '12px',
                    lineHeight: '1.6',
                    background: 'transparent',
                    padding: '1rem'
                  }}
                  showLineNumbers={showLineNumbers}
                  lineNumberStyle={{
                    minWidth: '3em',
                    paddingRight: '1em',
                    fontSize: '11px',
                    color: isDarkTheme ? '#6b7280' : '#9ca3af',
                    userSelect: 'none',
                    textAlign: 'right'
                  }}
                  wrapLines={true}
                  wrapLongLines={true}
                  codeTagProps={{
                    style: {
                      fontFamily: 'ui-monospace, SFMono-Regular, "SF Mono", Menlo, Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Courier New", monospace',
                      fontSize: '12px'
                    }
                  }}
                  lineProps={() => ({
                    style: {
                      display: 'block',
                      width: '100%'
                    }
                  })}
                >
                  {displayContent}
                </SyntaxHighlighter>
              </div>
            ) : (
              // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±—ã—Å—Ç—Ä–æ)
              <Textarea
                value={displayContent}
                readOnly
                className="min-h-[500px] font-mono text-xs resize-none"
                placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∑–¥–µ—Å—å..."
              />
            )}
            
            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            {!fileInfo.isValidSerialized && showPretty && (
              <div className="absolute top-2 right-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs z-10">
                –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
              </div>
            )}
            
            {isLargeFile && !enableSyntaxHighlighting && !isEditing && (
              <div className="absolute top-2 left-2 bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs z-10">
                ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (—Ñ–∞–π–ª &gt; 50KB)
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
